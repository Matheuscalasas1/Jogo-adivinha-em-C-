#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_JOGADORES 10
#define MAX_NOME_LENGTH 50
#define SENHA_ADMIN "senha123" // Senha de administrador

typedef struct {
    char nome[MAX_NOME_LENGTH];
    int pontuacao;
} Jogador;

Jogador jogadores[MAX_JOGADORES];
int numJogadores = 0;

// Função de comparação para a função qsort
int compararJogadores(const void *a, const void *b) {
    const Jogador *jogadorA = (const Jogador *)a;
    const Jogador *jogadorB = (const Jogador *)b;

    // Ordena em ordem decrescente de pontuação
    return (jogadorB->pontuacao - jogadorA->pontuacao);
}

// Função para adicionar um novo jogador
void adicionarJogador(char nome[]) {
    if (numJogadores < MAX_JOGADORES) {
        strncpy(jogadores[numJogadores].nome, nome, MAX_NOME_LENGTH - 1);
        jogadores[numJogadores].nome[MAX_NOME_LENGTH - 1] = '\0';
        jogadores[numJogadores].pontuacao = 1000;
        numJogadores++;
    } else {
        printf("Limite maximo de jogadores atingido!\n");
    }
}

// Função para exibir o ranking dos jogadores
void exibirRanking() {
    int i; // Declaração de variável movida para o início da função
    printf("\nRanking:\n");
    for (i = 0; i < numJogadores; i++) {
        printf("%d° lugar: %s - Pontuacao: %d\n", i+1, jogadores[i].nome, jogadores[i].pontuacao);
    }
} 

// Função para remover um jogador do ranking
void removerJogador(int indice) {
    int i; // Declaração de variável movida para o início do bloco

    if (indice >= 0 && indice < numJogadores) {
        for (i = indice; i < numJogadores - 1; i++) {
            strcpy(jogadores[i].nome, jogadores[i+1].nome);
            jogadores[i].pontuacao = jogadores[i+1].pontuacao;
        }
        numJogadores--;
        printf("Jogador removido com sucesso!\n");
    } else {
        printf("Indice invalido. Tente novamente.\n");
    }
}

// Função para editar o ranking (requer senha de administrador)
void editarRanking(char senha[]) {
    if (strcmp(senha, SENHA_ADMIN) == 0) {
        printf("\nO que voce deseja fazer?\n");
        printf("1. Editar o ranking\n");
        printf("2. Remover um jogador do ranking\n");
        printf("Escolha a opcao (1 ou 2): ");

        int escolha;
        scanf("%d", &escolha);

        if (escolha == 1) {
            // Aqui voce pode implementar a logica para editar o ranking
            printf("\nRanking editado com sucesso!\n");
        } else if (escolha == 2) {
            printf("\nDigite o indice do jogador que deseja remover: ");
            int indice;
            scanf("%d", &indice);
            removerJogador(indice - 1);
        } else {
            printf("\nOpcao invalida.\n");
        }
    } else {
        printf("\nSenha incorreta. Acesso negado!\n");
    }
}

int main() {
    char nome[MAX_NOME_LENGTH];
    char senha[20];
    int dificuldade, numeroSecreto, palpite, tentativas, maxTentativas;

    printf("Bem-vindo ao jogo de adivinhacao de numeros!\n");

    do {
        printf("\nDigite seu nome (ou 'q' para sair): ");
        scanf("%s", nome);

        if (strcmp(nome, "q") == 0) {
            break;
        }

        printf("Escolha a dificuldade (1 - Facil, 2 - Medio, 3 - Dificil): ");
        scanf("%d", &dificuldade);

        switch (dificuldade) {
            case 1:
                maxTentativas = 30;
                break;
            case 2:
                maxTentativas = 20;
                break;
            case 3:
                maxTentativas = 10;
                break;
            default:
                printf("Opçao invalida. Escolha novamente.\n");
                continue;
        }

        adicionarJogador(nome);

        numeroSecreto = rand() % 100 + 1;
        tentativas = 0;

        while (tentativas < maxTentativas) {
            printf("\nTentativa %d de %d. Digite seu palpite: ", tentativas+1, maxTentativas);
            scanf("%d", &palpite);

            if (palpite == numeroSecreto) {
                printf("Parabens! Voce acertou o numero %d em %d tentativas!\n", numeroSecreto, tentativas+1);
                break;
            } else if (palpite < numeroSecreto) {
                printf("Tente um numero maior!\n");
            } else {
                printf("Tente um numero menor!\n");
            }

            // Decrementa a pontuação do jogador por tentativa errada
            jogadores[numJogadores - 1].pontuacao -= 20; 
            tentativas++;
        }

        if (tentativas == maxTentativas) {
            printf("\nVoce excedeu o numero maximo de tentativas. O numero correto era %d.\n", numeroSecreto);
        }

        // Classifica os jogadores apos cada jogo
        qsort(jogadores, numJogadores, sizeof(Jogador), compararJogadores);
        exibirRanking();

        printf("\nDigite a senha de administrador para editar o ranking (ou 'q' para continuar): ");
        scanf("%s", senha);

        if (strcmp(senha, "q") == 0) {
            continue;
        }

        editarRanking(senha);

    } while (numJogadores < MAX_JOGADORES);
}
